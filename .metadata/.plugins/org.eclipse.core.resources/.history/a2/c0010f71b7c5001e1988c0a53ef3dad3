package book.my.car.service.impl;

import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.ReflectionUtils;

import book.my.car.entity.Driver;
import book.my.car.exception.ResourceNotFoundException;
import book.my.car.repo.DriverRepo;
import book.my.car.request.DriverApiRequest;
import book.my.car.response.DriverApiResponse;
import book.my.car.service.DriverService;

@Service
public class DriverServiceImpl implements DriverService{

	@Autowired
	private DriverRepo driverRepo;
	
	@Override
	public DriverApiResponse saveDriver(DriverApiRequest dRequest) {
	
		DriverApiResponse apiResponse=new DriverApiResponse();
		
		Driver driver=new Driver();
		
		BeanUtils.copyProperties(dRequest, driver);
		
		BeanUtils.copyProperties(dRequest, apiResponse);
		
		driverRepo.save(driver);
		
		return apiResponse;
	}

	@Override
	public List<DriverApiResponse> getAllDriversDetails() {
		
		List<Driver> driverList = driverRepo.findAll();
		
		List<DriverApiResponse> dResponses=new ArrayList<>();
		
		for(Driver driver : driverList) {
			
			DriverApiResponse dApiResponse=new DriverApiResponse();
			
			BeanUtils.copyProperties(driver, dApiResponse);
			
			dResponses.add(dApiResponse);
		}
		
		return dResponses;
	}

	@Override
	public DriverApiResponse getDriverById(String driverId) {
		
		Driver driver = driverRepo.findById(driverId).orElseThrow(()-> new ResourceNotFoundException("Driver", "DriverId", driverId));
		
		DriverApiResponse dApiResponse=new DriverApiResponse();
		
		return dApiResponse;
	}

	@Override
	public DriverApiResponse updateSpecificField(String mobNum, Map<String, Object> fields) {
		Driver driver = this.driverRepo.findByDriverMobNo(mobNum);				
		fields.forEach((key, value) -> {
			Field field = org.springframework.util.ReflectionUtils.findField(Driver.class, key);
			Optional<Field> optionalField = Optional.ofNullable(field);
			if (optionalField.isPresent()) {
				field.setAccessible(true);
				ReflectionUtils.setField(field, driver, value);
			} else {
				System.err.println("Field not found: " + key);
			}
		});
		Driver savedUser = driverRepo.save(driver);
		DriverApiResponse dResponse = new DriverApiResponse();
		BeanUtils.copyProperties(savedUser, dResponse);
		return dResponse;
		
	}

}
